import os
import torch
import torchaudio
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler
import sys
# Th√™m ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c g·ªëc v√†o sys.path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # Th∆∞ m·ª•c cha (PANNs)
sys.path.append(current_dir)

from pytorch.models import Cnn14

# C·∫•u h√¨nh
SAMPLE_RATE = 32000
DEVICE = 'cuda' if torch.cuda.is_available() else 'cpu'

# Load model Random Forest v√† scaler
try:
    model_path = os.path.join(parent_dir, "output", "rf_model.joblib")
    scaler_path = os.path.join(parent_dir, "output", "rf_scaler.joblib")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(model_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file model t·∫°i: {model_path}")
        print("‚ö†Ô∏è Vui l√≤ng ch·∫°y train_rf_model_RandomForest.py tr∆∞·ªõc ƒë·ªÉ t·∫°o model")
        exit(1)
    if not os.path.exists(scaler_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file scaler t·∫°i: {scaler_path}")
        print("‚ö†Ô∏è Vui l√≤ng ch·∫°y train_rf_model_RandomForest.py tr∆∞·ªõc ƒë·ªÉ t·∫°o scaler")
        exit(1)
        
    rf_model = joblib.load(model_path)
    scaler = joblib.load(scaler_path)
    print("‚úÖ ƒê√£ load model Random Forest v√† scaler th√†nh c√¥ng")
except Exception as e:
    print(f"‚ùå L·ªói khi load model: {str(e)}")
    exit(1)
# Load model Cnn14
try:
    cnn_model = Cnn14(
        sample_rate=32000, 
        window_size=1024, 
        hop_size=320, 
        mel_bins=64, 
        fmin=50, 
        fmax=14000,
        classes_num=527
    )
    cnn_model_path = os.path.join(current_dir, "Cnn14_mAP=0.431.pth")
    checkpoint = torch.load(cnn_model_path, map_location=DEVICE)
    cnn_model.load_state_dict(checkpoint['model'])
    cnn_model.to(DEVICE)
    cnn_model.eval()
    print("‚úÖ ƒê√£ load model Cnn14 th√†nh c√¥ng")
except Exception as e:
    print(f"‚ùå L·ªói khi load model Cnn14: {str(e)}")
    exit(1)

def load_audio(file_path):
    """Load v√† ti·ªÅn x·ª≠ l√Ω audio file"""
    waveform, sr = torchaudio.load(file_path)
    if sr != SAMPLE_RATE:
        waveform = torchaudio.functional.resample(waveform, sr, SAMPLE_RATE)
    return waveform.mean(dim=0)  # Chuy·ªÉn v·ªÅ mono

def extract_embedding(audio_tensor):
    """Tr√≠ch xu·∫•t embedding t·ª´ model Cnn14"""
    audio_tensor = audio_tensor.unsqueeze(0).to(DEVICE)
    with torch.no_grad():
        output_dict = cnn_model.forward(audio_tensor)
        embedding = output_dict['embedding'].squeeze().cpu().numpy()
    return embedding

def predict_safety(filepath):
    """D·ª± ƒëo√°n an to√†n/nguy hi·ªÉm cho file √¢m thanh"""
    try:
        # Load v√† x·ª≠ l√Ω audio
        audio = load_audio(filepath)
        
        # Tr√≠ch xu·∫•t embedding
        embedding = extract_embedding(audio)  # (n_frames, 1024)
        
        # T√≠nh trung b√¨nh theo chi·ªÅu th·ªùi gian
        mean_embedding = np.mean(embedding, axis=0)  # (1024,)
        
        # Ch·ªçn 6 features ƒë·∫ßu ti√™n (feat_0 ƒë·∫øn feat_5)
        selected_features = mean_embedding[:6]  # (6,)
        
        # Reshape ƒë·ªÉ ph√π h·ª£p v·ªõi scaler
        selected_features = selected_features.reshape(1, -1)  # (1, 6)
        
        # Chu·∫©n h√≥a
        features_scaled = scaler.transform(selected_features)
        
        # D·ª± ƒëo√°n
        prediction = rf_model.predict(features_scaled)[0]
        probability = rf_model.predict_proba(features_scaled)[0]
        
        label = "Safe" if prediction == 0 else "Danger"
        confidence = probability[prediction] * 100
        
        return {
            "label": label,
            "confidence": f"{confidence:.2f}%",
            "probabilities": {
                "Safe": f"{probability[0]*100:.2f}%",
                "Danger": f"{probability[1]*100:.2f}%"
            }
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file {filepath}: {str(e)}")
        return None

def main():
    # Test v·ªõi m·ªôt file √¢m thanh
    test_file = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file √¢m thanh (.wav): ")
    
    if not os.path.exists(test_file):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file!")
        return
        
    if not test_file.endswith('.wav'):
        print("‚ùå File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .wav!")
        return
    
    print("\nüîÑ ƒêang x·ª≠ l√Ω file...")
    result = predict_safety(test_file)
    
    if result:
        print("\n‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n:")
        print(f"Label: {result['label']}")
        print(f"Confidence: {result['confidence']}")
        print("\nX√°c su·∫•t cho t·ª´ng l·ªõp:")
        print(f"Safe: {result['probabilities']['Safe']}")
        print(f"Danger: {result['probabilities']['Danger']}")

if __name__ == "__main__":
    main()